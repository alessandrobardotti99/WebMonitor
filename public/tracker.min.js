({
  siteId: null,
  data: {
    loadTime: 0,
    errors: [],
    consoleEntries: [],
    imageIssues: [],
    resources: [],
  },
  init() {
    (this.siteId = this.getSiteId()),
      this.siteId
        ? (this.trackLoadTime(),
          this.trackErrors(),
          this.trackConsole(),
          this.trackImages(),
          this.trackResources(),
          this.setupBeacon())
        : console.error("WebMonitor: No site ID found");
  },
  getSiteId() {
    const e = document.currentScript;
    if (e && e.dataset.siteId) return e.dataset.siteId;
    const t = document.getElementsByTagName("script");
    for (const e of t) if (e.dataset.siteId) return e.dataset.siteId;
    return null;
  },
  trackLoadTime() {
    window.addEventListener("load", () => {
        let e = 0;
        const perf = performance.getEntriesByType("navigation")[0];

        if (perf) {
            e = perf.domComplete - perf.startTime;  // ‚è≥ Usa domComplete invece di loadEventEnd
        } else if (performance.timing) {
            e = performance.timing.domComplete - performance.timing.navigationStart;
        }

        if (e < 0 || isNaN(e)) {
            e = 0;
        }

        console.log("‚è≥ Tempo di caricamento registrato:", e);
        this.data.loadTime = e;
        this.sendData();
    });

    // üìå Per siti SPA (Next.js, React, Vue) monitoriamo le modifiche della pagina
    const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
            if (entry.entryType === "navigation") {
                let e = entry.domComplete - entry.startTime;
                console.log("‚ö° SPA Load Time:", e);
                this.data.loadTime = e;
                this.sendData();
            }
        });
    });

    observer.observe({ type: "navigation", buffered: true });
},
  trackErrors() {
    window.addEventListener("error", (e) => {
      e.error &&
        (this.data.errors.push({
          type: e.error.name || "Error",
          message: e.error.message,
          filename: e.filename,
          lineNumber: e.lineno,
          timestamp: new Date().toISOString(),
        }),
        this.sendData());
    }),
      window.addEventListener("unhandledrejection", (e) => {
        this.data.errors.push({
          type: "Promise Rejection",
          message: e.reason?.message || String(e.reason),
          filename: "Unknown",
          lineNumber: 0,
          timestamp: new Date().toISOString(),
        }),
          this.sendData();
      });
  },
  trackConsole() {
    const e = {
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error,
      },
      t =
        (t) =>
        (...s) => {
          this.data.consoleEntries.push({
            type: t,
            message: s
              .map((e) =>
                "object" == typeof e ? JSON.stringify(e) : String(e)
              )
              .join(" "),
            timestamp: new Date().toISOString(),
          }),
            e[t].apply(console, s),
            this.sendData();
        };
    (console.log = t("log")),
      (console.info = t("info")),
      (console.warn = t("warn")),
      (console.error = t("error"));
  },
  trackImages() {
    const e = new IntersectionObserver((e) => {
      e.forEach((e) => {
        if (e.isIntersecting) {
          const t = e.target,
            s = () => {
              const e = t.naturalWidth,
                s = t.naturalHeight,
                a = t.width,
                o = t.height,
                n = Math.abs(e / a);
              (n > 2 || n < 0.5) &&
                this.data.imageIssues.push({
                  url: t.src,
                  originalSize: { width: e, height: s },
                  displaySize: { width: a, height: o },
                });
            };
          t.complete ? s() : t.addEventListener("load", s);
        }
      });
    });
    document.querySelectorAll("img").forEach((t) => e.observe(t));
  },
  trackResources() {
    const e = performance.getEntriesByType("resource");
    this.data.resources = e.map((e) => ({
      name: e.name,
      type: e.initiatorType,
      duration: e.duration,
      size: e.transferSize,
    }));
  },
  setupBeacon() {
    let e = 0;
    setInterval(() => {
      this.sendData(),
        e++,
        e >= 60 &&
          ((this.data.errors = []),
          (this.data.consoleEntries = []),
          (this.data.imageIssues = []),
          (e = 0));
    }, 6e4);
  },
  sendData() {
    const e =
        "localhost" === window.location.hostname
          ? "http://localhost:3000"
          : "https://web-monitor-eta.vercel.app",
      t = new Blob(
        [
          JSON.stringify({
            siteId: this.siteId,
            timestamp: Date.now(),
            data: this.data,
          }),
        ],
        { type: "application/json" }
      );
    navigator.sendBeacon(`${e}/api/collect`, t);
  },
}).init();
